// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  name     String
  userName String @unique

  posts Post[]
  likes Like[]
  follower  Follow[] @relation("Follower")
  following Follow[] @relation("Following")

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Post {
  id       Int    @id @default(autoincrement())
  text     String
  authorId Int
  type    PostType     @default(ORIGINAL)

  originalPostId Int? // can be a post re-post or a post replied.

  author User?  @relation(fields: [authorId], references: [id])
  likes  Like[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Like {
  id     Int @id @default(autoincrement())
  userId Int
  postId Int

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, postId]) // The same user cannot like twice the same post
}

model Follow {
  id          Int @id @default(autoincrement())
  followerId  Int
  followingId Int

  follower  User @relation("Follower", fields: [followerId], references: [id])
  following User @relation("Following", fields: [followingId], references: [id])

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([followerId, followingId], name: "unique_follower_following")
}


enum PostType {
  ORIGINAL
  REPOST
  REPLY
}